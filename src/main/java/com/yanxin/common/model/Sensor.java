package com.yanxin.common.model;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jcbase.core.model.Condition;
import com.jcbase.core.model.Operators;
import com.jcbase.core.util.CommonUtils;
import com.jcbase.core.view.InvokeResult;
import com.jcbase.model.SysUser;
import com.jcbase.model.SysUserRole;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.yanxin.common.model.base.BaseSensor;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Sensor extends BaseSensor<Sensor> implements java.io.Serializable  {
	private static final long serialVersionUID = -5833191302759104592L;
	public static final Sensor me = new Sensor();// .dao();
	private static Logger log = LoggerFactory.getLogger(Sensor.class);

	
	public Page<Sensor> getSensorPage(int page, int rows, String keyword,String username,
			String orderbyStr) {
		Set<Condition> conditions=new HashSet<Condition>();
		List<Object> outConditionValues=new ArrayList<Object>();
		StringBuffer sqlExceptSelect=new StringBuffer();
		if(SysUserRole.dao.isOp(username)) {
			if(CommonUtils.isNotEmpty(keyword)){
				conditions.add(new Condition("station_name",Operators.LIKE,keyword));
			}
			sqlExceptSelect.append("FROM sensor,building,station,operation_class WHERE sensor.building_id=building.id AND building.station_id=station.id AND station.op_id=operation_class.id"+super.getWhereSql(conditions, outConditionValues)+" ORDER BY sensor.create_time DESC");
		}else {
			String sqlString = "SELECT operation_class_id FROM sys_user WHERE `name`='"+username+"'";
			List<Long> userList = Db.query(sqlString);
			int r=Integer.parseInt(String.valueOf(userList.get(0)));
			if(CommonUtils.isNotEmpty(keyword)){				
				conditions.add(new Condition("station_name",Operators.LIKE,keyword));
			}
			sqlExceptSelect.append("FROM sensor,building,station,operation_class WHERE sensor.building_id=building.id AND building.station_id=station.id AND station.op_id=operation_class.id AND operation_class.id="+r+super.getWhereSql(conditions, outConditionValues)+" ORDER BY sensor.create_time DESC");
		}
		String select="SELECT sensor.*,building.building_name AS buildingName,station.station_name AS stationName,operation_class.op_name AS opName";
		if(sqlExceptSelect.indexOf("where")!=-1) {
			int s=sqlExceptSelect.indexOf("where");
			sqlExceptSelect.replace(s, s+5, "AND");
		}

		return this.paginate(page, rows, select, sqlExceptSelect.toString());
	}
	
	public Page<Sensor> getSensorPageNew(int page, int rows, String username, int area,int opID,int station,int building,
			String orderbyStr) {
		SysUser user = SysUser.me.getByName(username);
		String select = "select sensor.*, building.building_name as building_name,work_area.area as area,su.op_name as op_name,station.station_name ";
		String sqlExceptSelect = "from sensor,building,station,operation_class su,work_area where sensor.building_id = building.id AND building.station_id=station.id AND station.op_id = su.id AND su.work_area_id=work_area.id";
		
		String select2 = "select sensor.sensor_code, platform_point.platform_code ";
		String sqlExceptSelect2 = "from platform_point,sensor,building,station,operation_class su,work_area where platform_point.pp_sensor_code=sensor.sensor_code AND platform_point.defaul=1 AND sensor.building_id = building.id AND building.station_id=station.id AND station.op_id = su.id AND su.work_area_id=work_area.id";

		
		if(user.getUserType().intValue() == new Integer(0).intValue()){
			
			if(area>0){
				sqlExceptSelect += " AND work_area.id="+area;
				sqlExceptSelect2 += " AND work_area.id="+area;
				if(opID > 0){
					sqlExceptSelect += " AND su.id="+opID;
					sqlExceptSelect2 += " AND su.id="+opID;
					if(station > 0){
						sqlExceptSelect += " AND station.id="+station;
						sqlExceptSelect2 += " AND station.id="+station;
						if(building >0){
							sqlExceptSelect += " AND building.id="+building;
							sqlExceptSelect2 += " AND building.id="+building;
						}
					}
				}
				sqlExceptSelect+=orderbyStr;
				return this.paginate(page, rows, select, sqlExceptSelect);
			}
			sqlExceptSelect+=orderbyStr;
			return this.paginate(page, rows, select, sqlExceptSelect);
		}else {
			int tempid = 0;
			if(area>0){
				tempid = area;
			}else{
				tempid = user.getWork_area_id();
			}
			sqlExceptSelect += " AND work_area.id="+tempid;
			sqlExceptSelect2 += " AND work_area.id="+tempid;
			if(opID > 0){
				sqlExceptSelect += " AND su.id="+opID;
				sqlExceptSelect2 += " AND su.id="+opID;
				if(station > 0){
					sqlExceptSelect += " AND station.id="+station;
					sqlExceptSelect2 += " AND station.id="+station;
					if(building >0){
						sqlExceptSelect += " AND building.id="+building;
						sqlExceptSelect2 += " AND building.id="+building;
					}
				}
			}
			sqlExceptSelect+=orderbyStr;
			return this.paginate(page, rows, select, sqlExceptSelect.toString());
		}
	}
	
	
	public Page<Sensor> getSensorPageNew(int page, int rows, String username, int area,int opID,int station,int building,int status,
			String orderbyStr) {
		SysUser user = SysUser.me.getByName(username);
		String select = "select sensor.*, building.building_name as building_name,work_area.area as area,operation_class.op_name as op_name,station.station_name ";
		String sqlExceptSelect = "from sensor,building,station,operation_class,work_area where sensor.building_id = building.id AND building.station_id=station.id AND station.op_id = operation_class.id AND operation_class.work_area_id=work_area.id ";
		
		/*String select2 = "select sensor.sensor_code, platform_point.platform_code ";
		String sqlExceptSelect2 = "from platform_point,sensor,building,station,operation_class su,work_area where platform_point.pp_sensor_code=sensor.sensor_code AND platform_point.defaul=1 AND sensor.building_id = building.id AND building.station_id=station.id AND station.op_id = su.id AND su.work_area_id=work_area.id";
		*/
		if(status ==0 || status==1){
			sqlExceptSelect += "AND sensor.status="+status+" ";
		}
		
		if(user.getUserType().intValue() == new Integer(0).intValue()){
			
			if(area>0){
				sqlExceptSelect += " AND work_area.id="+area;
				if(opID > 0){
					sqlExceptSelect += " AND operation_class.id="+opID;
					if(station > 0){
						sqlExceptSelect += " AND station.id="+station;
						if(building >0){
							sqlExceptSelect += " AND building.id="+building;
						}
					}
				}
				sqlExceptSelect += orderbyStr;
				return this.paginate(page, rows, select, sqlExceptSelect);
			}
			sqlExceptSelect += orderbyStr;
			return this.paginate(page, rows, select, sqlExceptSelect);
		}else {
			int tempid = 0;
			if(area>0){
				tempid = area;
			}else{
				tempid = user.getWork_area_id();
			}
			sqlExceptSelect += " AND work_area.id="+tempid;
			if(opID > 0){
				sqlExceptSelect += " AND operation_class.id="+opID;
				if(station > 0){
					sqlExceptSelect += " AND station.id="+station;
					if(building >0){
						sqlExceptSelect += " AND building.id="+building;
					}
				}
			}
			sqlExceptSelect += orderbyStr;
			return this.paginate(page, rows, select, sqlExceptSelect.toString());
		}
	}
	
	//用户名是否存在
	public boolean hasExist(String name){
		Set<Condition> conditions=new HashSet<Condition>();
		conditions.add(new Condition("sensor_code",Operators.EQ,name));
		long num=this.getCount(conditions);
		return num>0?true:false;
	}
	
	
	public InvokeResult save(Integer id, String name, String sensor_code,Integer building_id) {
		// TODO Auto-generated method stub
		if(id!=null){
			
			Sensor sensor=this.findById(id);
			if(building_id==0) {
				sensor.set("name",name).set("sensor_code",sensor_code).set("create_time", new Date()).set("update_time", new Date()).update();
			}else {
				sensor.set("name",name).set("sensor_code",sensor_code).set("building_id",building_id).set("create_time", new Date()).set("update_time", new Date()).update();
			}		
		}else {
			if(this.hasExist(sensor_code)){
				return InvokeResult.failure("监控器已存在");
			}else{
				new Sensor().set("name",name).set("sensor_code",sensor_code).set("status",0).set("building_id",building_id).set("create_time", new Date()).set("update_time", new Date()).save();
			}
		}
		
		return InvokeResult.success();
	}
	public InvokeResult save(Integer id, String name, String sensor_code,Integer building_id,Integer sensor_id,String server_ip) {
		// TODO Auto-generated method stub
		if(id!=null){
			
			Sensor sensor=this.findById(id);
			if(building_id==0) {
				sensor.set("name",name).set("sensor_id",sensor_id).set("sensor_code",sensor_code).set("create_time", new Date()).set("update_time", new Date()).set("server_ip",server_ip).update();
			}else {
				sensor.set("name",name).set("sensor_id",sensor_id).set("sensor_code",sensor_code).set("building_id",building_id).set("create_time", new Date()).set("update_time", new Date()).set("server_ip",server_ip).update();
			}		
		}else {
			if(this.hasExist(sensor_code)){
				return InvokeResult.failure("监控器已存在");
			}else{
				new Sensor().set("name",name).set("sensor_id",sensor_id).set("sensor_code",sensor_code).set("status",0).set("building_id",building_id).set("create_time", new Date()).set("update_time", new Date()).set("server_ip",server_ip).save();
			}
		}
		
		return InvokeResult.success();
	}
	
	public InvokeResult update(String sensor_code,Integer type,String value,Integer status,long time) {
		Date dd = new Date(time);
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(sensor_code != null){
			Sensor sensor = me.findFirst("select * from sensor where sensor_code=?",sensor_code);
			if(sensor!=null){
				Db.update("update sensor set status=?,create_time=? where sensor_code =?", status,format.format(dd), sensor.getSensorCode());
				/*try{
					Db.update("update sensor set status=?,create_time=? where sensor_code =?", status,format.format(dd), sensor.getSensorCode());
				}catch(Exception e){
					//Log.info(e.getMessage());
					e.printStackTrace();
				}*/
				/*sensor.set("status",status).update();
				sensor.set("create_time",format.format(dd)).update();*/
			}else{
				log.debug("此心跳消息无匹配的传感器！");
				return InvokeResult.failure("此心跳消息无匹配的传感器！");
			}
		}
		
		return InvokeResult.success();
	} 
	
	
	public InvokeResult deleteData(Integer id) {
		this.deleteById(id);
		return InvokeResult.success();
	}
	
	public InvokeResult setBatchIP(String idStrs, String server_ip) {
		List<Integer> ids=CommonUtils.getIntegerListByStrs(idStrs);
		
		Set<Condition> conditions=new HashSet<Condition>();
		conditions.add(new Condition("id",Operators.IN,ids));
		Map<String,Object> newValues=new HashMap<String,Object>();
		newValues.put("server_ip", server_ip);
		this.update(conditions, newValues);
		return InvokeResult.success();
	} 
	
	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == this) return true;
		if (obj instanceof Sensor) {
			Sensor ss = (Sensor)obj;
			return this.getSensorCode().equals(ss.getSensorCode());
		}
		return super.equals(obj);
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		
		return this.getSensorCode().hashCode();
	}
	
}
