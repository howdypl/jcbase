package com.yanxin.common.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.jcbase.core.model.Condition;
import com.jcbase.core.model.Operators;
import com.jcbase.core.util.CommonUtils;
import com.jcbase.core.view.InvokeResult;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.yanxin.common.model.base.BaseSensor;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Sensor extends BaseSensor<Sensor> {
	private static final long serialVersionUID = -5833191302759104592L;
	public static final Sensor me = new Sensor();
	
	
	public Page<Sensor> getSensorPage(int page, int rows, String keyword,
			String orderbyStr) {
		Set<Condition> conditions=new HashSet<Condition>();
		List<Object> outConditionValues=new ArrayList<Object>();
		if(CommonUtils.isNotEmpty(keyword)){
			conditions.add(new Condition("name",Operators.LIKE,keyword));
		}
		String select="select su.*, (select group_concat(building_name) as buildingName from building where building.id=su.building_id) as buildingName,(SELECT station_name from station WHERE station.id=(SELECT building.station_id FROM building WHERE building.id=su.building_id)) as stationName ,(select operation_class.op_name FROM operation_class WHERE operation_class.id =(SELECT station.op_id from station WHERE station.id=(SELECT building.station_id FROM building WHERE building.id=su.building_id))) as opName";
		StringBuffer sqlExceptSelect=new StringBuffer();
		sqlExceptSelect.append("FROM sensor su"+super.getWhereSql(conditions, outConditionValues));
		return this.paginate(page, rows, select, sqlExceptSelect.toString());
	}
	//用户名是否存在
	public boolean hasExist(String name){
		Set<Condition> conditions=new HashSet<Condition>();
		conditions.add(new Condition("sensor_code",Operators.EQ,name));
		long num=this.getCount(conditions);
		return num>0?true:false;
	}
	
	
	public InvokeResult save(Integer id, String name, String sensor_code,Integer building_id) {
		// TODO Auto-generated method stub
		if(id!=null){
			Sensor sensor=this.findById(id);
			if(building_id==0) {
				sensor.set("name",name).set("sensor_code",sensor_code).set("create_time", new Date()).update();
			}else {
				sensor.set("name",name).set("sensor_code",sensor_code).set("building_id",building_id).set("create_time", new Date()).update();
			}		
		}else {
			if(this.hasExist(sensor_code)){
				return InvokeResult.failure("监控器已存在");
			}else{
				new Sensor().set("name",name).set("sensor_code",sensor_code).set("status",0).set("building_id",building_id).set("create_time", new Date()).save();
			}
		}
		
		return InvokeResult.success();
	} 
	
	public InvokeResult deleteData(Integer id) {
		this.deleteById(id);
		return InvokeResult.success();
	}
	
}
