package com.yanxin.common.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.jcbase.core.model.Condition;
import com.jcbase.core.model.Operators;
import com.jcbase.core.util.CommonUtils;
import com.jcbase.core.view.InvokeResult;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.yanxin.common.model.base.BaseBuilding;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Building extends BaseBuilding<Building> {
	public static final Building me = new Building();
	private static final long serialVersionUID=-7944471090111271965L;
	
	
	
	public Page<Building> getBuildingPage(int page, int rows, String keyword,
			String orderbyStr) {
		Set<Condition> conditions=new HashSet<Condition>();
		List<Object> outConditionValues=new ArrayList<Object>();
		if(CommonUtils.isNotEmpty(keyword)){
			conditions.add(new Condition("building_name",Operators.LIKE,keyword));
		}
		String select="select su.*, (select group_concat(station_name) as stationName from station where station.id=su.station_id) as stationName,(select operation_class.op_name FROM operation_class WHERE operation_class.id =(SELECT station.op_id FROM station WHERE station.id=su.station_id)) as opName";
		StringBuffer sqlExceptSelect=new StringBuffer();
		sqlExceptSelect.append("from building su"+super.getWhereSql(conditions, outConditionValues));
		return this.paginate(page, rows, select, sqlExceptSelect.toString());
	}
	
	
	//用户名是否存在
			public boolean hasExist(String name){
				Set<Condition> conditions=new HashSet<Condition>();
				conditions.add(new Condition("building_name",Operators.EQ,name));
				long num=this.getCount(conditions);
				return num>0?true:false;
			}
			
			
			public InvokeResult save(Integer id, String building_name, Integer station_id) {
				// TODO Auto-generated method stub
				if(id!=null){
					Building building=this.findById(id);
					if(station_id==0) {
						building.set("building_name", building_name).update();
					}else {
						building.set("building_name", building_name).set("station_id",station_id).update();
					}
					
				}else {
					if(this.hasExist(building_name)){
						return InvokeResult.failure("区域已存在");
					}else{
						new Building().set("building_name", building_name).set("station_id",station_id).set("create_time", new Date()).save();
						
					}
				}
				
				return InvokeResult.success();
			} 
			
			public InvokeResult deleteData(Integer id) {
				this.deleteById(id);
				return InvokeResult.success();
			}
	

}
